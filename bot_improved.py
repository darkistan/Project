import logging
import json
import telebot
from datetime import datetime
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, ADMIN_1_ID, ADMIN_2_ID, ADMIN_BOT_1_TOKEN, ADMIN_BOT_2_TOKEN
from fabric import Connection
from paramiko.ssh_exception import SSHException, AuthenticationException, NoValidConnectionsError
import hashlib
import os
from typing import Dict, Optional, Any
from contextlib import contextmanager

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é
from logging.handlers import RotatingFileHandler

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
os.makedirs('logs', exist_ok=True)

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_handler = RotatingFileHandler('logs/bot.log', maxBytes=10 * 1024 * 1024, backupCount=5)
log_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(formatter)

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.getLogger().addHandler(log_handler)
logging.getLogger().setLevel(logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
ROUTERS_FILE = 'routers.json'
CONNECTION_TIMEOUT = 30
MAX_RETRIES = 3

class ConfigError(Exception):
    """–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    pass

class RouterSSHClient:
    def __init__(self, ip: str, username: str, ssh_password: str, ssh_port: int = 22):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ SSH.
        
        :param ip: IP-–∞–¥—Ä–µ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
        :param username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH
        :param ssh_password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH
        :param ssh_port: –ü–æ—Ä—Ç –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 22)
        """
        self.ip = ip
        self.username = username
        self.ssh_password = ssh_password
        self.ssh_port = ssh_port

    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è SSH –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        conn = None
        try:
            conn = Connection(
                host=self.ip,
                user=self.username,
                connect_kwargs={
                    "password": self.ssh_password,
                    "timeout": CONNECTION_TIMEOUT
                },
                port=self.ssh_port
            )
            yield conn
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SSH –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            raise
        finally:
            if conn:
                try:
                    conn.close()
                except Exception as e:
                    logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è SSH –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")

    def execute_script(self, script: str) -> str:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ —á–µ—Ä–µ–∑ SSH.
        
        :param script: –ù–∞–∑–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        """
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–∑–≤–∏ —Å–∫—Ä–∏–ø—Ç–∞
        if not script or not script.replace('_', '').replace('-', '').isalnum():
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ –Ω–∞–∑–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞")

        for attempt in range(MAX_RETRIES):
            try:
                with self.get_connection() as conn:
                    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ
                    result = conn.run(f"/system script run {script}", hide=True, timeout=CONNECTION_TIMEOUT)
                    return result.stdout if result.stdout else "–°–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (–±–µ–∑ –≤–∏–≤–æ–¥—É)"
                    
            except AuthenticationException as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
                if attempt == MAX_RETRIES - 1:
                    return "–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è SSH."
                    
            except NoValidConnectionsError as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
                if attempt == MAX_RETRIES - 1:
                    return f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞ IP-–∞–¥—Ä–µ—Å–æ—é {self.ip}:{self.ssh_port}."
                    
            except SSHException as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ SSH (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
                if attempt == MAX_RETRIES - 1:
                    return f"–ü–æ–º–∏–ª–∫–∞ SSH: {e}"
                    
            except Exception as e:
                logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞ (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
                if attempt == MAX_RETRIES - 1:
                    return f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞: {e}"

class UserStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    def __init__(self):
        self._states: Dict[int, Dict[str, Any]] = {}
    
    def set_state(self, user_id: int, state: str, **kwargs):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user_id not in self._states:
            self._states[user_id] = {}
        self._states[user_id]['state'] = state
        self._states[user_id].update(kwargs)
    
    def get_state(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return self._states.get(user_id)
    
    def clear_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user_id in self._states:
            del self._states[user_id]
    
    def get_state_value(self, user_id: int, key: str) -> Any:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞–Ω—É"""
        state = self.get_state(user_id)
        return state.get(key) if state else None

class RouterManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞–º–∏"""
    
    @staticmethod
    def load_routers() -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤"""
        try:
            if not os.path.exists(ROUTERS_FILE):
                raise ConfigError(f"–§–∞–π–ª {ROUTERS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
            with open(ROUTERS_FILE, 'r', encoding='utf-8') as file:
                routers = json.load(file)
                
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            for router_name, router_config in routers.items():
                required_fields = ['ip', 'username', 'ssh_password', 'script_password', 'scripts', 'allowed_users']
                for field in required_fields:
                    if field not in router_config:
                        raise ConfigError(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ '{field}' –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ '{router_name}'")
                        
            return routers
            
        except json.JSONDecodeError as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            raise ConfigError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É routers.json")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É routers.json: {e}")
            raise ConfigError(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    @staticmethod
    def has_access(user_id: int, router_name: str, routers: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
        router = routers.get(router_name)
        if not router:
            return False
        return str(user_id) in router.get('allowed_users', [])

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–Ω—ñ–≤
user_state_manager = UserStateManager()

def send_error_message(chat_id: int, message: str):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    try:
        bot.send_message(chat_id, f"‚ùå {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def send_success_message(chat_id: int, message: str):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    try:
        bot.send_message(chat_id, f"‚úÖ {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /run_script - –í–∏–∫–æ–Ω–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ\n"
        "‚Ä¢ /id - –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø\n"
        "‚Ä¢ /help - –î–æ–ø–æ–º–æ–≥–∞"
    )
    bot.reply_to(message, welcome_text)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} (ID: {message.from_user.id}) –ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "üìñ –î–æ–ø–æ–º–æ–≥–∞:\n\n"
        "1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /run_script –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤\n"
        "2. –í–∏–±–µ—Ä—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑—ñ —Å–ø–∏—Å–∫—É\n"
        "3. –í–∏–±–µ—Ä—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n"
        "4. –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /id –¥–ª—è –∑–∞–ø–∏—Ç—É."
    )
    bot.reply_to(message, help_text)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /id –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ—Å—Ç—É–ø—É
@bot.message_handler(commands=['id'])
def request_access(message):
    user_id = message.from_user.id
    user_name = message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
    user_first_name = message.from_user.first_name or ""
    user_last_name = message.from_user.last_name or ""

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_message = (
        f"üîê –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n"
        f"üë§ –Ü–º'—è: {user_first_name} {user_last_name}\n"
        f"üì± Username: @{user_name}\n"
        f"üÜî ID: {user_id}\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª routers.json –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É."
    )

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_bot_1 = telebot.TeleBot(ADMIN_BOT_1_TOKEN)
        admin_bot_2 = telebot.TeleBot(ADMIN_BOT_2_TOKEN)
        admin_bot_1.send_message(ADMIN_1_ID, admin_message)
        admin_bot_2.send_message(ADMIN_2_ID, admin_message)

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        send_success_message(message.chat.id, "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û—á—ñ–∫—É–π—Ç–µ —ó—Ö–Ω—î —Ä—ñ—à–µ–Ω–Ω—è.")
        logging.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} (ID: {user_id})")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –¥–æ—Å—Ç—É–ø: {e}")
        send_error_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤
@bot.message_handler(commands=['run_script'])
def send_router_selection(message):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} (ID: {user_id}) –≤–∏–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /run_script.")
    
    try:
        routers = RouterManager.load_routers()
    except ConfigError as e:
        send_error_message(message.chat.id, str(e))
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ InlineKeyboardMarkup –¥–ª—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
    keyboard = InlineKeyboardMarkup(row_width=1)
    accessible_routers = []
    
    for router_name in routers.keys():
        if RouterManager.has_access(user_id, router_name, routers):
            accessible_routers.append(router_name)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ base64 –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–∞–∑–≤
            import base64
            encoded_name = base64.b64encode(router_name.encode()).decode()
            keyboard.add(InlineKeyboardButton(
                f"üåê {router_name}", 
                callback_data=f"router:{encoded_name}"
            ))
    
    if accessible_routers:
        bot.reply_to(message, "üåê –í–∏–±–µ—Ä—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä:", reply_markup=keyboard)
        user_state_manager.set_state(user_id, 'waiting_for_router')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä—ñ–≤: {accessible_routers}")
    else:
        send_error_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∂–æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /id –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ—Å—Ç—É–ø—É.")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ—É—Ç–µ—Ä—ñ–≤.")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('router:'))
def handle_router_selection(call):
    user_id = call.from_user.id
    
    try:
        # –î–µ–∫–æ–¥—É—î–º–æ –Ω–∞–∑–≤—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
        import base64
        encoded_name = call.data.split(':', 1)[1]
        router_name = base64.b64decode(encoded_name.encode()).decode()
        
        routers = RouterManager.load_routers()
        router = routers.get(router_name)
        
        if not router or not RouterManager.has_access(user_id, router_name, routers):
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return

        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.username} –≤–∏–±—Ä–∞–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: {router_name}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
        user_state_manager.set_state(user_id, 'waiting_for_script', router=router_name)

        # –°—Ç–≤–æ—Ä—é—î–º–æ InlineKeyboardMarkup –¥–ª—è —Å–∫—Ä–∏–ø—Ç—ñ–≤
        keyboard = InlineKeyboardMarkup(row_width=2)
        for script in router["scripts"]:
            encoded_script = base64.b64encode(f"{router_name}:{script}".encode()).decode()
            keyboard.add(InlineKeyboardButton(
                f"‚ö° {script}", 
                callback_data=f"script:{encoded_script}"
            ))

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞
        bot.edit_message_text(
            f"‚ö° –í–∏–±–µ—Ä—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è {router_name}:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", show_alert=True)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('script:'))
def handle_script_selection(call):
    user_id = call.from_user.id
    
    try:
        # –î–µ–∫–æ–¥—É—î–º–æ –¥–∞–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞
        import base64
        encoded_data = call.data.split(':', 1)[1]
        decoded_data = base64.b64decode(encoded_data.encode()).decode()
        router_name, script = decoded_data.split(':', 1)

        # –ó–∞–ø–∏—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        bot.edit_message_text(
            f"üîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ '{script}' –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ {router_name}:",
            call.message.chat.id,
            call.message.message_id
        )
        
        user_state_manager.set_state(
            user_id, 
            'waiting_for_password', 
            router=router_name, 
            script=script,
            chat_id=call.message.chat.id
        )
        
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.username} –≤–∏–±—Ä–∞–≤ —Å–∫—Ä–∏–ø—Ç {script} –¥–ª—è {router_name}")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", show_alert=True)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
@bot.message_handler(func=lambda message: user_state_manager.get_state_value(message.from_user.id, 'state') == 'waiting_for_password')
def verify_password_and_execute(message):
    user_id = message.from_user.id
    state = user_state_manager.get_state(user_id)
    
    if not state:
        send_error_message(message.chat.id, "–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /run_script")
        return

    router_name = state.get('router')
    script = state.get('script')

    try:
        routers = RouterManager.load_routers()
        router = routers.get(router_name)
        
        if not router:
            send_error_message(message.chat.id, "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            user_state_manager.clear_state(user_id)
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        if message.text == router["script_password"]:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            status_message = bot.send_message(
                message.chat.id, 
                f"‚è≥ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç '{script}' –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ '{router_name}'..."
            )

            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫—Ä–∏–ø—Ç
            ssh_client = RouterSSHClient(
                router["ip"], 
                router["username"], 
                router["ssh_password"], 
                router.get("ssh_port", 22)
            )
            result = ssh_client.execute_script(script)

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è
            execution_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            log_message = f"–°–∫—Ä–∏–ø—Ç '{script}' –±—É–≤ –≤–∏–∫–æ–Ω–∞–Ω–∏–π –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ '{router_name}' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.username} –≤ {execution_time}."
            logging.info(log_message)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            notify_admins(execution_time, message.from_user.username, router_name, script, result[:100])

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            result_text = f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ '{script}' –Ω–∞ '{router_name}':\n\n```\n{result}\n```"
            if len(result_text) > 4096:
                result_text = result_text[:4090] + "...\n```"
                
            bot.edit_message_text(
                result_text,
                message.chat.id,
                status_message.message_id,
                parse_mode='Markdown'
            )
            
        else:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–µ–≤—ñ—Ä–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
                
            send_error_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞.")
            logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –≤–≤—ñ–≤ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ {script}.")
            
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_state_manager.clear_state(user_id)
        
    except ConfigError as e:
        send_error_message(message.chat.id, str(e))
        user_state_manager.clear_state(user_id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        send_error_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        user_state_manager.clear_state(user_id)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
def notify_admins(execution_time: str, username: str, router_name: str, script: str, result_preview: str = ""):
    admin_message = (
        f"üîî –°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞:\n\n"
        f"üìÖ –ß–∞—Å: {execution_time}\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\n"
        f"üåê –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: {router_name}\n"
        f"‚ö° –°–∫—Ä–∏–ø—Ç: {script}\n"
    )
    
    if result_preview:
        admin_message += f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): {result_preview}..."

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –æ–±–æ—Ö –±–æ—Ç—ñ–≤
        admin_bot_1 = telebot.TeleBot(ADMIN_BOT_1_TOKEN)
        admin_bot_2 = telebot.TeleBot(ADMIN_BOT_2_TOKEN)
        admin_bot_1.send_message(ADMIN_1_ID, admin_message)
        admin_bot_2.send_message(ADMIN_2_ID, admin_message)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    user_state = user_state_manager.get_state(message.from_user.id)
    if user_state and user_state.get('state') == 'waiting_for_password':
        return  # –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ–Ω—à–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
        
    bot.reply_to(
        message, 
        "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ config.py")
        exit(1)
        
    try:
        RouterManager.load_routers()
        logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.")
    except ConfigError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        exit(1)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.")
    try:
        bot.polling(none_stop=True, interval=1, timeout=60)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
        exit(1)